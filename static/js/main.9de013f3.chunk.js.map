{"version":3,"sources":["redux/selectors.js","redux/actions.js","components/NavigationBar.js","components/Card.js","components/LoadMore.js","components/CardList.js","HomePage.js","App.js","redux/reducer/rootReducer.js","serviceWorker.js","index.js","app/store.js"],"names":["isItemInStore","itemId","likedItemsIdsArray","getLikedItemsIds","i","length","likedItemsIds","window","localStorage","getItem","JSON","parse","getUrl","query","limit","page","fetchData","theUrl","params","dispatch","type","fetch","then","response","json","result","payload","items","results","getResults","NavigationBar","props","state","input","handleSubmit","bind","value","this","setState","event","RequestSearchData","className","onChange","e","updateInput","target","onClick","React","Component","connect","Card","isItemLiked","item","mal_id","handleClick","addLikeItem","key","src","image_url","alt","disabled","title","localStore","push","setItem","stringify","console","log","addItemToStore","RequestMoreData","CardList","RequestInitialData","cards","map","HomePage","App","initialState","error","isLoaded","likedItems","rootReducer","action","Boolean","location","hostname","match","store","preloadedState","middlewares","thunkMiddleware","enhancers","applyMiddleware","composedEnhancers","composeWithDevTools","name","realtime","trace","traceLimit","createStore","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9de013f3.chunk.js","sourcesContent":["export function addItemToStore(itemId){\n    var localStore = window.localStorage;\n    var likedItemsIdsArray = getLikedItemsIds();\n    if(!likedItemsIdsArray){\n      likedItemsIdsArray = [];\n    }\n    likedItemsIdsArray.push(itemId);\n    localStore.setItem(\"likedItemsIds\", JSON.stringify(likedItemsIdsArray));\n    console.log(\"item :\"+itemId+\" added\");\n  }\nexport function isItemInStore(itemId){\n    var likedItemsIdsArray = getLikedItemsIds();\n    if(likedItemsIdsArray){\n      for(let i = 0; i<likedItemsIdsArray.length; i++){\n        if(itemId ===likedItemsIdsArray[i]){\n          return true;\n      }\n    }\n  }\n  return false;\n}\nexport function getLikedItemsIds(){\n  var localStore = window.localStorage;\n  var likedItemsIds = localStore.getItem(\"likedItemsIds\");\n  var likedItemsIdsArray = JSON.parse(likedItemsIds);\n    if(likedItemsIds === null){\n      return [];\n  }\n  else{\n    return likedItemsIdsArray;\n  }\n} \n\n","import { getLikedItemsIds, addItemToStore} from \"./selectors\";\nexport function RequestInProcess(){\n  return { type: \"REQUESTINPROCESS\"};\n}\nexport function RequestInitialData(query){\n  const page =1;\n  const limit = 12;\n  const params = {\"type\": \"INITIALDATA\", \"query\": query};\n  const theUrl = getUrl(query,limit, page);\n  return fetchData(theUrl, params );\n  \n}\nexport function RequestMoreData(query,page){\n  const nextPage =page+1;\n  const limit = 12;\n  const params = {\"type\": \"MOREDATA\", \"query\": query};\n  const theUrl = getUrl(query,limit, nextPage);\n  return fetchData(theUrl, params );\n}\n\nexport function RequestSearchData(query){\n  // return {\"type\": \"SEARCHDATA\",\"payload\": {query}}\n  const page =1;\n  const limit = 12;\n  const params = {\"type\": \"SEARCHDATA\", \"query\": query};\n  const theUrl = getUrl(query,limit, page);\n  return fetchData(theUrl, params );\n}\n\nexport function addLikeItem(itemId){\n  addItemToStore(itemId);\n  const likedItemsIdsArray = getLikedItemsIds();\n  return{type:\"ADDLIKE\", payload:{likedItemsIdsArray} }\n}\n\nfunction getUrl(query,limit,page) {\n  return \"https://api.jikan.moe/v3/search/anime?q=\"+query+\"&limit=\"+limit+\"&page=\"+page;\n}\n\nfunction fetchData(theUrl, params) {\n  return dispatch => {\n    dispatch(RequestInProcess())\n    return fetch(theUrl)\n      .then(response => response.json())\n      .then(result => dispatch(getResults(result, params)))\n      }\n}\n\nfunction getResults(result, params){\n  return ({\n    type: params.type,\n    payload: {\n      items: result.results,\n      query: params.query\n    }   \n  })\n}\n\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { RequestSearchData} from \"../redux/actions\";\n// import PropTypes from 'prop-types';\n\n\n\nclass NavigationBar extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {input :\"\"};\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  updateInput(value){\n    this.setState({input: value});\n  }\n\n  handleSubmit(event){\n    this.props.RequestSearchData(this.state.input);\n    this.setState({input: \"\"});\n  }\n  render(){\n    return(\n      <div className='bar'>\n        <nav className=\"navbar navbar-expand-md fixed-top justify-content-center\">\n          <div className=\"search-box\">\n            <input onChange={e => this.updateInput(e.target.value)} className='nav-input' type=\"text\" value={this.state.input} />\n            <button className='nav-button' type=\"submit\" onClick={this.handleSubmit}>Go</button>\n          </div>\n        </nav>\n      </div>\n    );\n  }\n}\n\n\nexport default connect(null, {RequestSearchData})(NavigationBar);","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { isItemInStore } from \"../redux/selectors\";\nimport { addLikeItem } from \"../redux/actions\";\n\n\n\nclass Card extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {isItemLiked: isItemInStore(this.props.item.mal_id)};\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick(){\n    const itemId = this.props.item.mal_id;\n    this.props.addLikeItem(itemId);\n    this.setState({isItemLiked:!this.state.isItemLiked});\n  }\n  render(){\n    const item = this.props.item;\n    const className = this.state.isItemLiked? \"card-btn-liked\" : \"card-btn-overlay\";\n    return (\n            <div className='card' key={item.mal_id}>\n              <div className=\"card-img\" >\n                <img className='card-img-top'src={item.image_url} \n                 alt='' />\n                 <div className={className}>\n                    <button className=\"btn\" onClick={this.handleClick} \n                      disabled={this.state.isItemLiked}>\n                      {this.state.isItemLiked ? \"Liked\" : \"Like\"}\n                    </button>\n                  </div>\n              </div>              \n              <div className='card-body'>\n                <h5>\n                  {item.title}\n                </h5>\n              </div>\n            </div>\n          );\n  }\n}\n\nexport default connect(null, {isItemInStore,addLikeItem})(Card);\n","import { connect } from \"react-redux\";\nimport React from 'react';\nimport {RequestMoreData} from \"../redux/actions\";\n\n\nexport function LoadMore(props){\n\treturn(\n\t <div>\n        <button className=\"btn btn-outline-warning\" \n        \tonClick={()=>props.RequestMoreData(props.query,props.page)}>          \n            Load More\n        </button>\n      </div>\n      );\n}\n\nfunction mapStateToProps(state){\n  return {page: state.page, query: state.query};\n}\n\nexport default connect(mapStateToProps, {RequestMoreData})(LoadMore);\n// export default LoadMore;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { RequestInitialData } from \"../redux/actions\";\nimport Card from \"./Card\";\nimport LoadMore from \"./LoadMore\";\n\n\n\n\nclass CardList extends React.Component{\n  componentDidMount(){\n    this.props.RequestInitialData(this.props.query);\n  }\n  render(){\n    const items = this.props.items;\n    const cards = items.map(item => {\n        return (\n          <Card item={item} key={item.mal_id}/>\n        );\n      });\n    return(\n      <div>\n        <div className='row'>{cards}</div>\n        <LoadMore />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state){\n    return {items: state.items, query: state.query};\n}\n\n\nexport default connect(mapStateToProps, {RequestInitialData})(CardList);","import React from 'react';\nimport NavigationBar from \"./components/NavigationBar\";\nimport CardList from \"./components/CardList\";\nimport './styles.css';\n\n\nclass HomePage extends React.Component{\n  render() {  \n      return (\n        <div className='container'>\n          <NavigationBar/>\n          <CardList/>\n        </div>\n      );\n    }\n  \n}\n\nexport default HomePage;","import React from 'react';\r\nimport './styles.css';\r\nimport HomePage from \"./HomePage\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n        <div>\r\n        \t<HomePage/>\r\n        </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","\nconst initialState = {\n  error : null, \n  isLoaded : true,\n  items : [], \n  query : \"deat\", \n  page : 1,\n  likedItems: []\n};\n\n\n\n\nexport default function rootReducer(state = initialState, action) {\n  switch (action.type) {\n    case \"INITIALDATA\": {\n      const { items,query } = action.payload;\n      return  {...state,\n        items: items,\n        query: query\n      }\n    }\n    case \"SEARCHDATA\": {\n      const {items,  query } = action.payload;\n      return {\n        ...state,\n        items: [...items],\n        query: query,\n        page : 1\n      };\n    }\n    case \"MOREDATA\": {\n      const { items } = action.payload;\n      return {\n        ...state,\n        items: [...state.items,...items],\n        page: state.page+1\n      };\n    }\n    case \"REQUESTINPROCESS\":{\n      return {...state, isLoaded : false};\n    }\n    case \"ADDLIKE\":{\n      const {likedItems} = action.payload;\n      return {...state, likedItems : likedItems};\n    }\n    default:\n      return state;\n  }\n}\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport configureStore from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './styles.css';\r\n\r\n const store = configureStore();\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// // import { createStore } from \"redux\";\r\n// import rootReducer from \"../redux/reducer/rootReducer\";\r\n// import { composeWithDevTools } from ‘redux-devtools-extension’;\r\n\r\n// // export default createStore(rootReducer);\r\n\r\n\r\n\r\n// import { createStore, applyMiddleware } from \"redux\";\r\n// import thunk from \"redux-thunk\";\r\n\r\n// const store = createStore(\r\n//   rootReducer,\r\n//   applyMiddleware(thunk),composeWithDevTools()\r\n// );\r\n\r\n// export default store;\r\n\r\n\r\n\r\n\r\n\r\nimport { applyMiddleware, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\nimport rootReducer from \"../redux/reducer/rootReducer\";\r\n\r\nexport default function configureStore(preloadedState) {\r\n  const middlewares = [thunkMiddleware]\r\n  const middlewareEnhancer = applyMiddleware(...middlewares)\r\n\r\n  const enhancers = [middlewareEnhancer]\r\n  var composedEnhancers = composeWithDevTools({\r\n    name: `Redux`,\r\n    realtime: true,\r\n    trace: true,\r\n    traceLimit: 25\r\n});\r\n  composedEnhancers = composeWithDevTools(...enhancers);\r\n\r\n  const store = createStore(rootReducer, preloadedState, composedEnhancers)\r\n\r\n  return store\r\n}\r\n\r\n"],"sourceRoot":""}